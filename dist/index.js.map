{"version":3,"sources":["array.util.js","math.util.js","number.util.js"],"names":["Array","prototype","first","last","slice","shuffle","sort","Math","random","floor","length","sum","reduce","a","b","average","count","n","filter","e","min","max","sortDesc","reverse","range","start","end","step","abs","arr","i","zip","arr1","arr2","map","idx","randInt","undefined","gcd","lcm","isInteger","number","isDecimal","calculate","operation","pow","log","primeFactorization","num","isNaN","root","sqrt","result","arguments","x","push","Number","NaN","console","trunc","ceil","round","sign"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * @file\n * @description\n */\n\n/**\n * @returns first {Element} element of an array.\n */\nArray.prototype.first = function() {\n  return this[0];\n}\n\n/**\n * @returns last {Element} of an array.\n */\nArray.prototype.last = function() {\n  return this.slice(-1)[0];\n}\n\n/**\n * @returns {Array} which is shuffled.\n */\nArray.prototype.shuffle = function() {\n  return this.slice().sort(() => Math.random() - 0.5)\n}\n\n/**\n * @returns random {Element} of the array.\n */\nArray.prototype.random = function() {\n  return this[Math.floor(Math.random() * this.length)];\n}\n\n/**\n * @returns {Number} sum of all elements in the array.\n */\nArray.prototype.sum = function() {\n  return this.reduce((a,b) => a + b);\n}\n/**\n * @returns {Number} average of all elements in the array.\n */\nArray.prototype.average = function() {\n  return this.reduce((a,b) => a + b) / this.length;\n}\n\n/**\n * @param {Element} n\n * @returns {Number} count of occurence of given param n.\n */\nArray.prototype.count = function(n) {\n  return [this.filter(e => e === n)].length;\n}\n\n/**\n * @returns {Number} minimum from an array.\n */\nArray.prototype.min = function() {\n  return Math.min(...this);\n}\n\n/**\n * @returns {Number} maximum from an array\n */\nArray.prototype.max = function() {\n  return Math.max(...this);\n}\n\n/**\n * @returns {Array} which is sorted descendingly.\n */\nArray.prototype.sortDesc = function() {\n  return this.sort((a,b) => a-b).reverse();\n}\n\n/**\n * @param {Number} start - lower bound of a range.\n * @param {Number} end - upper bound of a range.\n * @param {Number} step - step of a range.\n * @returns {Array} which which is range [start,end) which consist of all integers divisible by step.\n */\nArray.range = function(start, end = 0, step = 1) {\n  let range = Math.abs(end - start) - 1;\n  range /= Math.abs(step);\n  range = ~~range;\n\n  let arr = Array(range);\n\n  start = start - end === start ? 0 : start;\n\n  for (let i = 0; i <= range; i++) {\n    arr[i] = i === 0 ? start : arr[i - 1] + step;\n  }\n\n  return arr;\n}\n\n/**\n * @param {Array} arr1\n * @param {Array} arr2\n * @returns {Array} zipped array.\n */\nArray.zip = function(arr1, arr2) {\n  return (\n    arr1.length > arr2.length ? arr2 : arr1\n  ).map(\n    (e, idx) => [arr1[idx], arr2[idx]]\n  );\n}\n","/**\n * @file\n * @description\n */\n\n/**\n * @param {Number} start\n * @param {Number} end\n * @returns {Number} integer in range [start,end).\n */\nMath.randInt = function(start, end) {\n  if (end === undefined) {\n    return Math.floor(Math.random() * start);\n  } else {\n    return Math.floor(Math.random() * (end - start) + start);\n  }\n}\n\n/**\n * @param {Number} a\n * @param {Number} b\n * @returns {Number} GCD of a and b.\n */\nMath.gcd = function (a, b) {\n  return !b ? a : Math.gcd(b, a % b);\n}\n\n/**\n * @param {Number} a\n * @param {Number} b\n * @returns {Number} LCM of a and b.\n */\nMath.lcm = function (a, b) {\n  return (a * b) / Math.gcd(a, b);\n}\n\n/**\n * @param {Number} number\n * @returns {Boolean} determining if the number is an integer.\n */\nMath.isInteger = function(number) {\n  return number - Math.floor(number) === 0;\n}\n\n/**\n * @param {Number} number\n * @returns {Boolean} determining if the number is an integer.\n */\nMath.isDecimal = function(number) {\n  return number - Math.floor(number) != 0;\n}\n\n/**\n * @param {String} operation\n * @param {Number} a\n * @param {Number} b\n * @returns {Number} Result of binary operation on a and b given in a prefix notation.  ``````\n */\nMath.calculate = function(operation, a, b) {\n  return {\n    '+': a + b,\n    '-': a - b,\n    '*': a * b,\n    '/': a / b,\n    '^': Math.pow(a,b),\n    'r': Math.pow(a,1/b),\n    'l': Math.log(a) / Math.log(b)\n  }[operation];\n}\n\n/**\n * Computes LCM - Least Common Multiple - of two numbers.\n * @param {Number} num\n * @returns {Array|Number} - LCM of a and b.\n */\nMath.primeFactorization = function(num) {\n\n  // Asserting if num is not a number.\n  if ( isNaN( num ) ){\n    return [];\n  }\n\n  var\n    root = Math.sqrt(num),\n    // Getting unnamed paremeter from recursive calls.\n    result = arguments[1] || [],\n    x = 2;\n\n  if(num % x){//if not divisible by 2\n   x = 3;//assign first odd\n   while((num % x) && ((x = x + 2) < root)){}//iterate odds\n  }\n  //if no factor found then num is prime\n  x = (x <= root) ? x : num;\n  result.push(x);//push latest prime factor\n\n  //if num isn't prime factor make recursive call\n  return (x === num) ? result : primeFactorization(num/x, result) ;\n};\n","\n/**\n * @returns {Number}\n */\nNumber.prototype.abs = function() {\n  if (isNaN(this)) return NaN;\n  console.log((this ^ (this >> 31)) - (this >> 31));\n  return this >= 0 ? this : -this;\n}\n\n/**\n * @returns {Number}\n */\nNumber.prototype.trunc = function() {\n  if (isNaN(this)) return NaN;\n  return ~~this;\n}\n\n/**\n * @returns {Number}\n */\nNumber.prototype.floor = function() {\n  if (isNaN(this)) return NaN;\n  return this >= 0 ? ~~this : ~~this - 1;\n}\n\n/**\n * @returns {Number}\n */\nNumber.prototype.ceil = function() {\n  if (isNaN(this)) return NaN;\n  return this >= 0 ? ~~this + 1: ~~this;\n}\n\n/**\n * @returns {Number}\n */\nNumber.prototype.round = function() {\n  if (isNaN(this)) return NaN;\n  return this >= 0 ? ~~(this + 0.5) : ~~(this - 0.5);\n}\n\n/**\n * @returns {Number}\n */\nNumber.prototype.sign = function() {\n  if (isNaN(this)) return NaN;\n  return Math.sign(this);\n}\n\n/**\n * @param {Number} number\n * @returns {Boolean} determining if the number is an integer.\n */\nNumber.isInteger = function() {\n  return this - Math.floor(this) === 0;\n}\n\n/**\n * @param {Number} number\n * @returns {Boolean} determining if the number is an integer.\n */\nNumber.isDecimal = function() {\n  return this - Math.floor(this) != 0;\n}\n"]}