{"version":3,"sources":["array.util.js","math.util.js","number.util.js"],"names":[],"mappingsnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.es2016.js","sourcesContent":["/**\n * @file\n * @description\n */\n\n/**\n * @returns first {Element} element of an array.\n */\nArray.prototype.first = function() {\n  return this[0];\n}\n\n/**\n * @returns last {Element} of an array.\n */\nArray.prototype.last = function() {\n  return this.slice(-1)[0];\n}\n\n/**\n * @returns {Array} which is shuffled.\n */\nArray.prototype.shuffle = function() {\n  return this.slice().sort(() => Math.random() - 0.5)\n}\n\n/**\n * @returns random {Element} of the array.\n */\nArray.prototype.random = function() {\n  return this[Math.floor(Math.random() * this.length)];\n}\n\n/**\n * @returns {Number} sum of all elements in the array.\n */\nArray.prototype.sum = function() {\n  return this.reduce((a,b) => a + b);\n}\n/**\n * @returns {Number} average of all elements in the array.\n */\nArray.prototype.average = function() {\n  return this.reduce((a,b) => a + b) / this.length;\n}\n\n/**\n * @param {Element} n\n * @returns {Number} count of occurence of given param n.\n */\nArray.prototype.count = function(n) {\n  return [this.filter(e => e === n)].length;\n}\n\n/**\n * @returns {Number} minimum from an array.\n */\nArray.prototype.min = function() {\n  return Math.min(...this);\n}\n\n/**\n * @returns {Number} maximum from an array\n */\nArray.prototype.max = function() {\n  return Math.max(...this);\n}\n\n/**\n * @returns {Array} which is sorted descendingly.\n */\nArray.prototype.sortDesc = function() {\n  return this.sort((a,b) => a-b).reverse();\n}\n\n/**\n * @param {Number} start - lower bound of a range.\n * @param {Number} end - upper bound of a range.\n * @param {Number} step - step of a range.\n * @returns {Array} which which is range [start,end) which consist of all integers divisible by step.\n */\nArray.range = function(start, end = 0, step = 1) {\n  let range = Math.abs(end - start) - 1;\n  range /= Math.abs(step);\n  range = ~~range;\n\n  let arr = Array(range);\n\n  start = start - end === start ? 0 : start;\n\n  for (let i = 0; i <= range; i++) {\n    arr[i] = i === 0 ? start : arr[i - 1] + step;\n  }\n\n  return arr;\n}\n\n/**\n * @param {Array} arr1\n * @param {Array} arr2\n * @returns {Array} zipped array.\n */\nArray.zip = function(arr1, arr2) {\n  return (\n    arr1.length > arr2.length ? arr2 : arr1\n  ).map(\n    (e, idx) => [arr1[idx], arr2[idx]]\n  );\n}\n","/**\n * @file\n * @description\n */\n\n/**\n * @param {Number} start\n * @param {Number} end\n * @returns {Number} integer in range [start,end).\n */\nMath.randInt = function(start, end) {\n  if (end === undefined) {\n    return Math.floor(Math.random() * start);\n  } else {\n    return Math.floor(Math.random() * (end - start) + start);\n  }\n}\n\n/**\n * @param {Number} a\n * @param {Number} b\n * @returns {Number} GCD of a and b.\n */\nMath.gcd = function (a, b) {\n  return !b ? a : Math.gcd(b, a % b);\n}\n\n/**\n * @param {Number} a\n * @param {Number} b\n * @returns {Number} LCM of a and b.\n */\nMath.lcm = function (a, b) {\n  return (a * b) / Math.gcd(a, b);\n}\n\n/**\n * @param {Number} a\n * @param {String} sign\n * @param {Number} b\n * @returns {Number} Result of binary operation on a and b.\n */\nMath.calculate = function (a, operation, b) {\n  return {\n    '+': a + b,\n    '-': a - b,\n    '*': a * b,\n    '/': a / b,\n    '^': Math.pow(a,b)\n  }[operation];\n}\n","\n/**\n * @returns {Number}\n */\nNumber.prototype.abs = function() {\n  if (isNaN(this)) return NaN;\n  console.log((this ^ (this >> 31)) - (this >> 31));\n  return this >= 0 ? this : -this;\n}\n\n/**\n * @returns {Number}\n */\nNumber.prototype.trunc = function() {\n  if (isNaN(this)) return NaN;\n  return ~~this;\n}\n\n/**\n * @returns {Number}\n */\nNumber.prototype.floor = function() {\n  if (isNaN(this)) return NaN;\n  return this >= 0 ? ~~this : ~~this - 1;\n}\n\n/**\n * @returns {Number}\n */\nNumber.prototype.ceil = function() {\n  if (isNaN(this)) return NaN;\n  return this >= 0 ? ~~this + 1: ~~this;\n}\n\n/**\n * @returns {Number}\n */\nNumber.prototype.round = function() {\n  if (isNaN(this)) return NaN;\n  return this >= 0 ? ~~(this + 0.5) : ~~(this - 0.5);\n}\n\n/**\n * @returns {Number}\n */\nNumber.prototype.sign = function() {\n  if (isNaN(this)) return NaN;\n  return Math.sign(this);\n}\n"]}